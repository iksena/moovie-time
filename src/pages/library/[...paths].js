import Head from 'next/head';
import { useMemo } from 'react';

import { getLibraries } from '@/lib/tmdb';
import constants from '@/lib/constants';
import TopMenu from '@/components/top-menu';
import Footer from '@/components/footer';
import TMDBContext from '@/contexts/tmdb-context';
import MovieGrid from '@/components/movie-grid';
import FilterLibrary from '@/components/filter-library';

function Title({ type }) {
  const title = type === 'tv' ? 'TVs' : 'Movies';

  return (
    <div className="px-32 pt-20">
      <div className="w-32 h-1 top-0 mb-3 bg-moovie-red" />
      <div className="flex flex-row justify-between mb-12 mt-0.5">
        <span className="font-semibold text-4xl text-neutral-200">{title}</span>
      </div>
    </div>
  );
}

function Body({ movies }) {
  return (
    <div className="flex flex-row px-32 relative">
      <div className="sticky left-0 top-0 basis-1/4 mr-8"><FilterLibrary /></div>
      <div className="basis-3/4"><MovieGrid movies={movies} col={4} /></div>
    </div>
  );
}

export default function Libraries({
  type, baseUrl, apiKey, movies,
}) {
  const tmdb = useMemo(() => ({ apiKey, baseUrl }), [baseUrl, apiKey]);

  return (
    <TMDBContext.Provider value={tmdb}>
      <Head>
        <title>Moovie Time - Perqara</title>
        <meta name="description" content="Generated by create next app for Perqara" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="bg-moovie-background">
        <TopMenu baseUrl={baseUrl} />
        <main className="relative">
          <div className="absolute top-0 bg-white/5 h-80 w-full" />
          <Title type={type} />
          {/* <MovieGrid movies={movies} /> */}
          <Body movies={movies} />
        </main>
        <footer>
          <Footer />
        </footer>
      </div>
    </TMDBContext.Provider>
  );
}

export async function getServerSideProps({ query }) {
  const { paths, sortBy = '' } = query;
  const [type, id = false] = paths;
  const baseUrl = constants.TMDB_BASE_URL;
  const apiKey = constants.TMDB_API_KEY;
  const movies = await getLibraries(1, sortBy, type);

  return {
    props: {
      movies,
      baseUrl,
      apiKey,
      type,
      id,
      sortBy,
    },
  };
}
